{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["natural","require","titles","Search","urls","sum","args","reduce","a","b","console","log","Object","keys","App","props","onChange","e","setState","currentTerms","target","value","search","terms","state","results","Set","replace","split","map","x","PorterStemmer","stem","undefined","numDocs","length","idfAgg","forEach","title","tf","idf","Math","count","entries","url","sort","render","className","style","backgroundColor","opacity","width","fontSize","textAlign","type","slice","onClick","window","open","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"gOAAe,I,YCITA,EAAUC,EAAQ,IACjBC,EAAgBC,EAAhBD,OAAQE,EAAQD,EAARC,KAETC,EAAM,SAACC,GAAD,OAAUA,EAAKC,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAEC,MAU7CC,QAAQC,IAAIC,OAAOC,KAAKV,I,IAsFTW,E,kDA5Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,SAAW,SAACC,GACV,EAAKC,SAAS,CAACC,aAAcF,EAAEG,OAAOC,SATrB,EAYnBC,OAAS,SAACC,GAAW,IACZD,EAAU,EAAKE,MAAfF,OACHG,EAAU,YAAI,IAAIC,IAAIH,EAAMI,QAAQ,KAAM,IAAIC,MAAM,OACrDC,KAAI,SAAAC,GAAC,OAAIR,EAAOtB,EAAQ+B,cAAcC,KAAKF,OAC3CD,KAAI,SAAAC,GAAC,YAAUG,IAANH,EAAkB,GAAKA,KAE9BI,EAAW/B,EAAX+B,QAEL,QAAgBD,IAAZR,GAA4C,IAAnBA,EAAQU,OACnC,MAAO,GAET,IAAIC,EAAS,GAcb,OAbAX,EAAQY,SAAQ,SAAAP,GACdA,EAAEO,SAAQ,YAAkB,IAAD,qBAAfC,EAAe,KAARC,EAAQ,KACrBC,EAAMC,KAAK9B,IAAIuB,EAAUJ,EAAEK,QAC3BO,EAAK,uBAAc,OAANN,QAAM,IAANA,GAAA,UAAAA,EAASE,UAAT,eAAiBI,QAAS,IAAlC,CAAuCH,EAAGC,IACnDJ,EAAOE,GAAS,CAACA,QAAOI,eAIhB9B,OAAO+B,QAAQP,GACxBP,KAAI,mCAAES,EAAF,YAAUI,EAAV,EAAUA,MAAOE,EAAjB,EAAiBA,IAAjB,MACF,CAACN,QAAOI,MAAOrC,EAAIqC,GAAQE,UAC5BC,MAAK,SAACrC,EAAEC,GAAH,OAASA,EAAEiC,MAAQlC,EAAEkC,UAnCb,EAwCnBI,OAAS,WAAO,IAAD,EACkB,EAAKtB,MAA7BL,EADM,EACNA,aACAH,GAFM,EACQM,OADR,eAENN,UACHS,EAAUN,EAOd,OAJEM,EADc,KAAZA,EACQ,GAEA,EAAKH,OAAOH,GAGtB,qBAAK4B,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,sBAAKC,MAAO,CAACC,gBAAgB,OAAQC,QAAQ,QAA7C,UACE,mDACA,mCACA,uBAAOF,MAAO,CAACG,MAAO,QAASC,SAAS,OAAQC,UAAU,UAAWC,KAAK,OAAOtC,SAAUA,IAC3F,8BAbO,KAca,IAAnBS,EAAQU,QAAgB,uBAAOY,UAAU,UAAjB,SACvB,gCACGtB,EAAQ8B,MAAM,EAAE,GAAG1B,KAAI,SAAAC,GAAC,OACvB,6BACE,oBAAI0B,QAAS,kBAAMC,OAAOC,KAAK,mCAAqCtD,EAAK0B,EAAEQ,OAAQ,WAAnF,mBACMpC,EAAO4B,EAAEQ,OADf,aAC0BR,EAAEY,MAD5B,QADOZ,EAAEQ,sBA3DzB,EAAKd,MAAQ,CACXL,aAAc,GACdG,OAAQnB,EAAOmB,QAJA,E,UADHqC,IAAMC,WCdTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASxB,OACP,cAAC,IAAMyB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.6b24c46e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg'\nimport './App.css'\nimport React, {Component} from 'react'\nimport Search from './reverse_index.json'\nconst natural = require('natural') \nconst {titles, urls} = Search\n\nconst sum = (args) => args.reduce((a,b) => a+b)\nconst mean = (args) => sum(args) / args.length\nconst score = (args) => {\n    let m = mean(args)\n    let sse = -args\n        .map(x => Math.pow(x-m, 2)) \n        .reduce((a,c) => a+c)\n    return sse + sum(args)\n}\n\nconsole.log(Object.keys(Search))\n\n/*\nlet top100 = Search.globalCount\nconsole.log('search', Search.search)\nconsole.log('autocomplete', Search.autoComplete)\nconsole.log('top results', top100)\n*/\n\nclass App extends React.Component { \n  constructor(props) { \n    super(props)\n    this.state = {\n      currentTerms: '',\n      search: Search.search,\n    }\n  }\n\n  onChange = (e) => {\n    this.setState({currentTerms: e.target.value})\n  }\n\n  search = (terms) => {\n    const {search} = this.state\n    let results = [...new Set(terms.replace(/'/g, '').split(' '))]\n      .map(x => search[natural.PorterStemmer.stem(x)])\n      .map(x => x === undefined ? [] : x)\n    // tf idf\n    let {numDocs} = Search\n    // tfidf aggregate\n    if (results === undefined || results.length === 0) {\n      return []\n    }\n    let idfAgg = {}\n    results.forEach(x => {\n      x.forEach(([title, tf]) => {\n        let idf = Math.log(numDocs / x.length)\n        let count = [...(idfAgg?.[title]?.count || []), tf*idf]\n        idfAgg[title] = {title, count}\n      })\n    })\n    // reduce / summarize\n    let final = Object.entries(idfAgg)\n      .map(([title, {count, url}]) =>\n        ({title, count: sum(count), url})\n      ).sort((a,b) => b.count - a.count)\n\n    return final\n  }\n\n  render = () => { \n    const {currentTerms, search} = this.state\n    const {onChange} = this\n    let results = currentTerms\n    let complete = ''\n    if (results === '') {\n      results = [] \n    } else {\n      results = this.search(currentTerms)\n    } //let complete =this.complete(currentTerms) let complete = '' console.log()\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div style={{backgroundColor:'none', opacity:'100%'}}>\n            <h1>Beau Index Search</h1>\n            <h1>?</h1>\n            <input style={{width: '600px', fontSize:'16pt', textAlign:'center'}} type='text' onChange={onChange}></input>\n            <div>{complete}</div>\n            {results.length !== 0 && <table className='results'>\n              <tbody>\n                {results.slice(0,7).map(x => \n                  <tr key={x.title}>\n                    <td onClick={() => window.open('https://www.youtube.com/watch?v=' + urls[x.title], '_blank')}>\n                      {`${titles[x.title]} (${x.count})`}\n                    </td>\n                  </tr>)}\n              </tbody>\n            </table>\n            }\n          </div>\n        </header>\n      </div>\n    )\n  }\n            \n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}